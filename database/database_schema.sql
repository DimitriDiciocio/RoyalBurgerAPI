-- =====================================================
-- ROYAL BURGER DATABASE SCHEMA
-- Estrutura atual do banco de dados Firebird
-- =====================================================

-- ADDRESSES definition
-- Drop table
-- DROP TABLE ADDRESSES;

CREATE TABLE ADDRESSES (
	ID INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	USER_ID INTEGER NOT NULL,
	STREET VARCHAR(255) NOT NULL,
	"NUMBER" VARCHAR(20),
	COMPLEMENT VARCHAR(100),
	NEIGHBORHOOD VARCHAR(100) NOT NULL,
	CITY VARCHAR(100) NOT NULL,
	STATE VARCHAR(2) NOT NULL,
	ZIP_CODE VARCHAR(10) NOT NULL,
	IS_ACTIVE BOOLEAN DEFAULT TRUE NOT NULL,
	IS_DEFAULT BOOLEAN DEFAULT FALSE NOT NULL,
	CONSTRAINT INTEG_16 PRIMARY KEY (ID),
	CONSTRAINT INTEG_18 FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE
);
CREATE INDEX RDB$FOREIGN8 ON ADDRESSES (USER_ID);
CREATE UNIQUE INDEX RDB$PRIMARY7 ON ADDRESSES (ID);

-- APP_SETTINGS definition
-- Drop table
-- DROP TABLE APP_SETTINGS;

CREATE TABLE APP_SETTINGS (
	SETTING_KEY VARCHAR(50) NOT NULL,
	SETTING_VALUE VARCHAR(512),
	DESCRIPTION VARCHAR(255),
	UPDATED_AT TIMESTAMP,
	UPDATED_BY INTEGER,
	CONSTRAINT INTEG_111 PRIMARY KEY (SETTING_KEY),
	CONSTRAINT INTEG_112 FOREIGN KEY (UPDATED_BY) REFERENCES USERS(ID)
);
CREATE INDEX RDB$FOREIGN48 ON APP_SETTINGS (UPDATED_BY);
CREATE UNIQUE INDEX RDB$PRIMARY47 ON APP_SETTINGS (SETTING_KEY);

-- CART_ITEM_EXTRAS definition
-- Drop table
-- DROP TABLE CART_ITEM_EXTRAS;

CREATE TABLE CART_ITEM_EXTRAS (
	ID INTEGER NOT NULL,
	CART_ITEM_ID INTEGER NOT NULL,
	INGREDIENT_ID INTEGER NOT NULL,
	QUANTITY INTEGER DEFAULT 1 NOT NULL,
	CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
	CONSTRAINT PK_CART_ITEM_EXTRAS PRIMARY KEY (ID),
	CONSTRAINT FK_CART_ITEM_EXTRAS_INGREDIENT FOREIGN KEY (INGREDIENT_ID) REFERENCES INGREDIENTS(ID),
	CONSTRAINT FK_CART_ITEM_EXTRAS_ITEM FOREIGN KEY (CART_ITEM_ID) REFERENCES CART_ITEMS(ID) ON DELETE CASCADE
);
CREATE INDEX FK_CART_ITEM_EXTRAS_INGREDIENT ON CART_ITEM_EXTRAS (INGREDIENT_ID);
CREATE INDEX FK_CART_ITEM_EXTRAS_ITEM ON CART_ITEM_EXTRAS (CART_ITEM_ID);
CREATE INDEX IDX_CART_ITEM_EXTRAS_INGREDIENT_ID ON CART_ITEM_EXTRAS (INGREDIENT_ID);
CREATE INDEX IDX_CART_ITEM_EXTRAS_ITEM_ID ON CART_ITEM_EXTRAS (CART_ITEM_ID);

-- CART_ITEMS definition
-- Drop table
-- DROP TABLE CART_ITEMS;

CREATE TABLE CART_ITEMS (
	ID INTEGER NOT NULL,
	CART_ID INTEGER NOT NULL,
	PRODUCT_ID INTEGER NOT NULL,
	QUANTITY INTEGER DEFAULT 1 NOT NULL,
	CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
	UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
	CONSTRAINT PK_CART_ITEMS PRIMARY KEY (ID),
	CONSTRAINT FK_CART_ITEMS_CART FOREIGN KEY (CART_ID) REFERENCES CARTS(ID) ON DELETE CASCADE,
	CONSTRAINT FK_CART_ITEMS_PRODUCT FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(ID)
);
CREATE INDEX FK_CART_ITEMS_CART ON CART_ITEMS (CART_ID);
CREATE INDEX FK_CART_ITEMS_PRODUCT ON CART_ITEMS (PRODUCT_ID);
CREATE INDEX IDX_CART_ITEMS_CART_ID ON CART_ITEMS (CART_ID);
CREATE INDEX IDX_CART_ITEMS_PRODUCT_ID ON CART_ITEMS (PRODUCT_ID);

-- CARTS definition
-- Drop table
-- DROP TABLE CARTS;

CREATE TABLE CARTS (
	ID INTEGER NOT NULL,
	USER_ID INTEGER NOT NULL,
	CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	IS_ACTIVE BOOLEAN DEFAULT TRUE,
	CONSTRAINT PK_CARTS PRIMARY KEY (ID),
	CONSTRAINT UK_CARTS_USER_ACTIVE UNIQUE (USER_ID,IS_ACTIVE),
	CONSTRAINT FK_CARTS_USER FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);
CREATE INDEX FK_CARTS_USER ON CARTS (USER_ID);
CREATE INDEX IDX_CARTS_ACTIVE ON CARTS (IS_ACTIVE);
CREATE INDEX IDX_CARTS_USER_ID ON CARTS (USER_ID);

-- CATEGORIES definition
-- Drop table
-- DROP TABLE CATEGORIES;

CREATE TABLE CATEGORIES (
	ID INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	NAME VARCHAR(100) NOT NULL,
	DESCRIPTION BLOB SUB_TYPE TEXT,
	IS_ACTIVE BOOLEAN DEFAULT TRUE NOT NULL,
	DISPLAY_ORDER INTEGER DEFAULT 0,
	CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	CONSTRAINT PK_CATEGORIES PRIMARY KEY (ID)
);
CREATE INDEX IDX_CATEGORIES_DISPLAY_ORDER ON CATEGORIES (DISPLAY_ORDER);

-- CHAT_MESSAGES definition
-- Drop table
-- DROP TABLE CHAT_MESSAGES;

CREATE TABLE CHAT_MESSAGES (
	ID INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	CHAT_ID INTEGER NOT NULL,
	SENDER_ID INTEGER NOT NULL,
	MESSAGE BLOB SUB_TYPE TEXT NOT NULL,
	TIMESTAMP_ TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
	IS_READ BOOLEAN DEFAULT FALSE,
	CONSTRAINT INTEG_94 PRIMARY KEY (ID),
	CONSTRAINT INTEG_96 FOREIGN KEY (CHAT_ID) REFERENCES CHATS(ID) ON DELETE CASCADE,
	CONSTRAINT INTEG_98 FOREIGN KEY (SENDER_ID) REFERENCES USERS(ID)
);
CREATE INDEX RDB$FOREIGN42 ON CHAT_MESSAGES (CHAT_ID);
CREATE INDEX RDB$FOREIGN43 ON CHAT_MESSAGES (SENDER_ID);
CREATE UNIQUE INDEX RDB$PRIMARY41 ON CHAT_MESSAGES (ID);

-- CHATS definition
-- Drop table
-- DROP TABLE CHATS;

CREATE TABLE CHATS (
	ID INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	ORDER_ID INTEGER NOT NULL,
	USER_ID INTEGER NOT NULL,
	ATTENDANT_ID INTEGER,
	CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
	IS_OPEN BOOLEAN DEFAULT TRUE,
	CONSTRAINT INTEG_86 PRIMARY KEY (ID),
	CONSTRAINT INTEG_88 UNIQUE (ORDER_ID),
	CONSTRAINT INTEG_89 FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ID) ON DELETE CASCADE,
	CONSTRAINT INTEG_91 FOREIGN KEY (USER_ID) REFERENCES USERS(ID),
	CONSTRAINT INTEG_92 FOREIGN KEY (ATTENDANT_ID) REFERENCES USERS(ID)
);
CREATE UNIQUE INDEX "RDB$37" ON CHATS (ORDER_ID);
CREATE INDEX RDB$FOREIGN38 ON CHATS (ORDER_ID);
CREATE INDEX RDB$FOREIGN39 ON CHATS (USER_ID);
CREATE INDEX RDB$FOREIGN40 ON CHATS (ATTENDANT_ID);
CREATE UNIQUE INDEX RDB$PRIMARY36 ON CHATS (ID);

-- EMAIL_VERIFICATIONS definition
-- Drop table
-- DROP TABLE EMAIL_VERIFICATIONS;

CREATE TABLE EMAIL_VERIFICATIONS (
	ID INTEGER NOT NULL,
	EMAIL VARCHAR(255) NOT NULL,
	VERIFICATION_CODE VARCHAR(6) NOT NULL,
	EXPIRES_AT TIMESTAMP NOT NULL,
	CREATED_AT TIMESTAMP NOT NULL,
	CONSTRAINT INTEG_126 PRIMARY KEY (ID)
);
CREATE INDEX IDX_EMAIL_VERIFICATIONS_EMAIL ON EMAIL_VERIFICATIONS (EMAIL);
CREATE INDEX IDX_EMAIL_VERIFICATIONS_EXPIRES ON EMAIL_VERIFICATIONS (EXPIRES_AT);
CREATE UNIQUE INDEX RDB$PRIMARY51 ON EMAIL_VERIFICATIONS (ID);

-- FINANCIAL_TRANSACTIONS definition
-- Drop table
-- DROP TABLE FINANCIAL_TRANSACTIONS;

CREATE TABLE FINANCIAL_TRANSACTIONS (
	ID INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	DESCRIPTION VARCHAR(255) NOT NULL,
	AMOUNT DECIMAL(10,2) NOT NULL,
	"TYPE" VARCHAR(20) NOT NULL,
	TRANSACTION_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
	PAYMENT_METHOD VARCHAR(50),
	NOTES BLOB SUB_TYPE TEXT,
	CREATED_BY INTEGER,
	CONSTRAINT INTEG_118 PRIMARY KEY (ID),
	CONSTRAINT INTEG_124 FOREIGN KEY (CREATED_BY) REFERENCES USERS(ID)
);
CREATE INDEX RDB$FOREIGN50 ON FINANCIAL_TRANSACTIONS (CREATED_BY);
CREATE UNIQUE INDEX RDB$PRIMARY49 ON FINANCIAL_TRANSACTIONS (ID);

-- INGREDIENTS definition
-- Drop table
-- DROP TABLE INGREDIENTS;

CREATE TABLE INGREDIENTS (
	ID INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	NAME VARCHAR(100) NOT NULL,
	PRICE DECIMAL(10,2) DEFAULT 0 NOT NULL,
	IS_AVAILABLE BOOLEAN DEFAULT TRUE NOT NULL,
	CURRENT_STOCK DECIMAL(10,3) DEFAULT 0 NOT NULL,
	STOCK_UNIT VARCHAR(10) DEFAULT 'un' NOT NULL,
	MIN_STOCK_THRESHOLD DECIMAL(10,3) DEFAULT 0 NOT NULL,
	MAX_STOCK DECIMAL(10,3) DEFAULT 0 NOT NULL,
	SUPPLIER VARCHAR(255),
	CATEGORY VARCHAR(100),
	STOCK_STATUS VARCHAR(20) DEFAULT 'ok',
	-- Campos para sistema de porções padronizadas
	BASE_PORTION_QUANTITY DECIMAL(10,3) DEFAULT 1 NOT NULL,
	BASE_PORTION_UNIT VARCHAR(10) DEFAULT 'un' NOT NULL,
	CONSTRAINT INTEG_42 PRIMARY KEY (ID),
	CONSTRAINT INTEG_44 UNIQUE (NAME)
);
CREATE UNIQUE INDEX "RDB$18" ON INGREDIENTS (NAME);
CREATE UNIQUE INDEX RDB$PRIMARY17 ON INGREDIENTS (ID);

-- LOYALTY_POINTS definition
-- Drop table
-- DROP TABLE LOYALTY_POINTS;

CREATE TABLE LOYALTY_POINTS (
	USER_ID INTEGER NOT NULL,
	ACCUMULATED_POINTS INTEGER DEFAULT 0 NOT NULL,
	SPENT_POINTS INTEGER DEFAULT 0 NOT NULL,
	POINTS_EXPIRATION_DATE DATE,
	CONSTRAINT INTEG_77 PRIMARY KEY (USER_ID),
	CONSTRAINT INTEG_78 FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE
);
CREATE INDEX RDB$FOREIGN33 ON LOYALTY_POINTS (USER_ID);
CREATE UNIQUE INDEX RDB$PRIMARY32 ON LOYALTY_POINTS (USER_ID);

-- LOYALTY_POINTS_HISTORY definition
-- Drop table
-- DROP TABLE LOYALTY_POINTS_HISTORY;

CREATE TABLE LOYALTY_POINTS_HISTORY (
	ID INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	USER_ID INTEGER NOT NULL,
	ORDER_ID INTEGER,
	POINTS INTEGER NOT NULL,
	REASON VARCHAR(255),
	EARNED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
	CONSTRAINT INTEG_81 PRIMARY KEY (ID),
	CONSTRAINT INTEG_83 FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE
);
CREATE INDEX RDB$FOREIGN35 ON LOYALTY_POINTS_HISTORY (USER_ID);
CREATE UNIQUE INDEX RDB$PRIMARY34 ON LOYALTY_POINTS_HISTORY (ID);

-- NOTIFICATIONS definition
-- Drop table
-- DROP TABLE NOTIFICATIONS;

CREATE TABLE NOTIFICATIONS (
	ID INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	USER_ID INTEGER NOT NULL,
	MESSAGE VARCHAR(512) NOT NULL,
	LINK VARCHAR(255),
	IS_READ BOOLEAN DEFAULT FALSE NOT NULL,
	CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
	CONSTRAINT INTEG_101 PRIMARY KEY (ID),
	CONSTRAINT INTEG_103 FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE
);
CREATE INDEX RDB$FOREIGN45 ON NOTIFICATIONS (USER_ID);
CREATE UNIQUE INDEX RDB$PRIMARY44 ON NOTIFICATIONS (ID);

-- ORDER_ITEM_EXTRAS definition
-- Drop table
-- DROP TABLE ORDER_ITEM_EXTRAS;

CREATE TABLE ORDER_ITEM_EXTRAS (
	ID INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	ORDER_ITEM_ID INTEGER NOT NULL,
	INGREDIENT_ID INTEGER NOT NULL,
	QUANTITY INTEGER NOT NULL,
	UNIT_PRICE DECIMAL(10,2) NOT NULL,
	CONSTRAINT INTEG_69 PRIMARY KEY (ID),
	CONSTRAINT INTEG_71 FOREIGN KEY (ORDER_ITEM_ID) REFERENCES ORDER_ITEMS(ID) ON DELETE CASCADE,
	CONSTRAINT INTEG_73 FOREIGN KEY (INGREDIENT_ID) REFERENCES INGREDIENTS(ID)
);
CREATE INDEX RDB$FOREIGN30 ON ORDER_ITEM_EXTRAS (ORDER_ITEM_ID);
CREATE INDEX RDB$FOREIGN31 ON ORDER_ITEM_EXTRAS (INGREDIENT_ID);
CREATE UNIQUE INDEX RDB$PRIMARY29 ON ORDER_ITEM_EXTRAS (ID);

-- ORDER_ITEMS definition
-- Drop table
-- DROP TABLE ORDER_ITEMS;

CREATE TABLE ORDER_ITEMS (
	ID INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	ORDER_ID INTEGER NOT NULL,
	PRODUCT_ID INTEGER NOT NULL,
	QUANTITY INTEGER NOT NULL,
	UNIT_PRICE DECIMAL(10,2) NOT NULL,
	NOTES BLOB SUB_TYPE TEXT,
	CONSTRAINT INTEG_62 PRIMARY KEY (ID),
	CONSTRAINT INTEG_64 FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ID) ON DELETE CASCADE,
	CONSTRAINT INTEG_66 FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(ID)
);
CREATE INDEX RDB$FOREIGN27 ON ORDER_ITEMS (ORDER_ID);
CREATE INDEX RDB$FOREIGN28 ON ORDER_ITEMS (PRODUCT_ID);
CREATE UNIQUE INDEX RDB$PRIMARY26 ON ORDER_ITEMS (ID);

-- ORDERS definition
-- Drop table
-- DROP TABLE ORDERS;

CREATE TABLE ORDERS (
	ID INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	USER_ID INTEGER,
	ADDRESS_ID INTEGER,
	STATUS VARCHAR(20) NOT NULL,
	TOTAL_AMOUNT DECIMAL(10,2) DEFAULT 0 NOT NULL,
	PAYMENT_METHOD VARCHAR(20),
	NOTES BLOB SUB_TYPE TEXT,
	CONFIRMATION_CODE VARCHAR(10),
	CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
	UPDATED_AT TIMESTAMP,
	ORDER_TYPE VARCHAR(20) DEFAULT 'delivery' NOT NULL,
	TABLE_ID INTEGER,
	ATTENDANT_ID INTEGER,
	DELIVERER_ID INTEGER,
	CONSTRAINT INTEG_53 PRIMARY KEY (ID),
	CONSTRAINT FK_ORDERS_DELIVERER FOREIGN KEY (DELIVERER_ID) REFERENCES USERS(ID),
	CONSTRAINT INTEG_54 FOREIGN KEY (USER_ID) REFERENCES USERS(ID),
	CONSTRAINT INTEG_55 FOREIGN KEY (ADDRESS_ID) REFERENCES ADDRESSES(ID),
	CONSTRAINT INTEG_61 FOREIGN KEY (ATTENDANT_ID) REFERENCES USERS(ID)
);
CREATE INDEX FK_ORDERS_DELIVERER ON ORDERS (DELIVERER_ID);
CREATE INDEX IX_ORDERS_DELIVERER ON ORDERS (DELIVERER_ID);
CREATE INDEX RDB$FOREIGN23 ON ORDERS (USER_ID);
CREATE INDEX RDB$FOREIGN24 ON ORDERS (ADDRESS_ID);
CREATE INDEX RDB$FOREIGN25 ON ORDERS (ATTENDANT_ID);
CREATE UNIQUE INDEX RDB$PRIMARY22 ON ORDERS (ID);

-- PASSWORD_RESET definition
-- Drop table
-- DROP TABLE PASSWORD_RESET;

CREATE TABLE PASSWORD_RESET (
	USER_ID INTEGER NOT NULL,
	VERIFICATION_CODE VARCHAR(6) NOT NULL,
	EXPIRES_AT TIMESTAMP NOT NULL,
	USED_AT TIMESTAMP
);
CREATE INDEX IDX_PASSWORD_RESET_USER ON PASSWORD_RESET (USER_ID);
CREATE UNIQUE INDEX UQ_PASSWORD_RESET_CODE ON PASSWORD_RESET (VERIFICATION_CODE);

-- PRODUCT_INGREDIENTS definition
-- Drop table
-- DROP TABLE PRODUCT_INGREDIENTS;

CREATE TABLE PRODUCT_INGREDIENTS (
	PRODUCT_ID INTEGER NOT NULL,
	INGREDIENT_ID INTEGER NOT NULL,
	PORTIONS DECIMAL(10,2) DEFAULT 1 NOT NULL,
	CONSTRAINT INTEG_52 PRIMARY KEY (PRODUCT_ID,INGREDIENT_ID),
	CONSTRAINT INTEG_48 FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(ID) ON DELETE CASCADE,
	CONSTRAINT INTEG_50 FOREIGN KEY (INGREDIENT_ID) REFERENCES INGREDIENTS(ID) ON DELETE CASCADE
);
CREATE INDEX RDB$FOREIGN19 ON PRODUCT_INGREDIENTS (PRODUCT_ID);
CREATE INDEX RDB$FOREIGN20 ON PRODUCT_INGREDIENTS (INGREDIENT_ID);
CREATE UNIQUE INDEX RDB$PRIMARY21 ON PRODUCT_INGREDIENTS (PRODUCT_ID,INGREDIENT_ID);

-- PRODUCTS definition
-- Drop table
-- DROP TABLE PRODUCTS;

CREATE TABLE PRODUCTS (
	ID INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	NAME VARCHAR(100) NOT NULL,
	DESCRIPTION BLOB SUB_TYPE TEXT,
	PRICE DECIMAL(10,2) NOT NULL,
	IMAGE_URL VARCHAR(512),
	IS_ACTIVE BOOLEAN DEFAULT TRUE NOT NULL,
	COST_PRICE DECIMAL(10,2) DEFAULT 0 NOT NULL,
	PREPARATION_TIME_MINUTES INTEGER DEFAULT 0 NOT NULL,
	CATEGORY_ID INTEGER,
	CONSTRAINT INTEG_37 PRIMARY KEY (ID),
	CONSTRAINT FK_PRODUCTS_CATEGORY FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORIES(ID)
);
CREATE INDEX FK_PRODUCTS_CATEGORY ON PRODUCTS (CATEGORY_ID);
CREATE INDEX IDX_PRODUCTS_CATEGORY_ID ON PRODUCTS (CATEGORY_ID);
CREATE UNIQUE INDEX RDB$PRIMARY15 ON PRODUCTS (ID);

-- TOKEN_BLACKLIST definition
-- Drop table
-- DROP TABLE TOKEN_BLACKLIST;

CREATE TABLE TOKEN_BLACKLIST (
	JTI VARCHAR(36) NOT NULL,
	EXPIRES_AT TIMESTAMP NOT NULL,
	CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
	CONSTRAINT INTEG_108 PRIMARY KEY (JTI)
);
CREATE UNIQUE INDEX RDB$PRIMARY46 ON TOKEN_BLACKLIST (JTI);

-- TWO_FACTOR_VERIFICATIONS definition
-- Drop table
-- DROP TABLE TWO_FACTOR_VERIFICATIONS;

CREATE TABLE TWO_FACTOR_VERIFICATIONS (
	ID INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	USER_ID INTEGER NOT NULL,
	VERIFICATION_CODE VARCHAR(6) NOT NULL,
	EXPIRES_AT TIMESTAMP NOT NULL,
	CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	USED BOOLEAN DEFAULT FALSE,
	CONSTRAINT INTEG_131 PRIMARY KEY (ID),
	CONSTRAINT INTEG_135 FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE
);
CREATE INDEX IDX_TWO_FACTOR_EXPIRES ON TWO_FACTOR_VERIFICATIONS (EXPIRES_AT);
CREATE INDEX IDX_TWO_FACTOR_USER_ID ON TWO_FACTOR_VERIFICATIONS (USER_ID);
CREATE INDEX RDB$FOREIGN53 ON TWO_FACTOR_VERIFICATIONS (USER_ID);
CREATE UNIQUE INDEX RDB$PRIMARY52 ON TWO_FACTOR_VERIFICATIONS (ID);

-- USERS definition
-- Drop table
-- DROP TABLE USERS;

CREATE TABLE USERS (
	ID INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	FULL_NAME VARCHAR(100) NOT NULL,
	EMAIL VARCHAR(100) NOT NULL,
	PASSWORD_HASH VARCHAR(255) NOT NULL,
	"ROLE" VARCHAR(20) NOT NULL,
	PHONE VARCHAR(20),
	CPF VARCHAR(14),
	DATE_OF_BIRTH DATE NOT NULL,
	IS_ACTIVE BOOLEAN DEFAULT TRUE NOT NULL,
	CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
	IS_EMAIL_VERIFIED BOOLEAN DEFAULT FALSE,
	TWO_FACTOR_ENABLED BOOLEAN DEFAULT FALSE,
	CONSTRAINT INTEG_12 UNIQUE (CPF),
	CONSTRAINT INTEG_4 PRIMARY KEY (ID)
);
CREATE UNIQUE INDEX "RDB$6" ON USERS (CPF);
CREATE UNIQUE INDEX RDB$PRIMARY3 ON USERS (ID);

-- =====================================================
-- COMENTÁRIOS SOBRE AS TABELAS
-- =====================================================

/*
TABELAS PRINCIPAIS:
- USERS: Usuários do sistema (clientes, funcionários, administradores)
- CATEGORIES: Categorias de produtos
- PRODUCTS: Produtos do cardápio
- INGREDIENTS: Ingredientes dos produtos
- ORDERS: Pedidos realizados
- ADDRESSES: Endereços dos usuários

TABELAS DE RELACIONAMENTO:
- PRODUCT_INGREDIENTS: Relaciona produtos com seus ingredientes
- ORDER_ITEMS: Itens de um pedido
- ORDER_ITEM_EXTRAS: Extras adicionais nos itens do pedido
- CART_ITEMS: Itens no carrinho de compras
- CART_ITEM_EXTRAS: Extras no carrinho

TABELAS DE FUNCIONALIDADES:
- EMAIL_VERIFICATIONS: Códigos de verificação de email
- PASSWORD_RESET: Códigos de reset de senha
- TWO_FACTOR_VERIFICATIONS: Códigos de autenticação de dois fatores
- TOKEN_BLACKLIST: Tokens JWT revogados
- LOYALTY_POINTS: Sistema de pontos de fidelidade
- FINANCIAL_TRANSACTIONS: Transações financeiras
- NOTIFICATIONS: Notificações do sistema
- CHATS: Sistema de chat para pedidos
- APP_SETTINGS: Configurações da aplicação

FUNCIONALIDADES IMPLEMENTADAS:
- Sistema de autenticação com JWT
- Verificação de email
- Reset de senha
- Autenticação de dois fatores
- Sistema de carrinho
- Gestão de estoque de ingredientes
- Sistema de pedidos
- Chat em tempo real
- Pontos de fidelidade
- Gestão financeira
- Notificações
- Ordenação de categorias (DISPLAY_ORDER)
*/
