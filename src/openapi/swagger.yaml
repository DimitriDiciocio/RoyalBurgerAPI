openapi: 3.0.0
info:
  title: Royal Burger API
  description: |
    API completa para o sistema de delivery da hamburgueria Royal Burger.

    ## Funcionalidades Principais
    - Sistema de autenticação JWT
    - Gestão de clientes e funcionários
    - Catálogo de produtos e ingredientes
    - Sistema de pedidos com rastreamento
    - Chat em tempo real
    - Sistema de notificações
    - Programa de fidelidade
    - Gestão de endereços

    ## Autenticação
    A API utiliza JWT (JSON Web Tokens) para autenticação. Inclua o token no header:
    ```
    Authorization: Bearer <seu_token>
    ```
  version: "2.1.0"
  contact:
    name: Royal Burger Development Team
    email: dev@royalburger.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

# Códigos de Erro Comuns
error_codes:
  # Autenticação
  USER_NOT_FOUND: "Usuário não encontrado"
  ACCOUNT_INACTIVE: "Conta inativa"
  INVALID_PASSWORD: "Senha incorreta"

  # Validação de Dados
  INVALID_EMAIL: "Formato de e-mail inválido"
  INVALID_PHONE: "Formato de telefone inválido"
  INVALID_CPF: "CPF inválido"
  WEAK_PASSWORD: "Senha muito fraca"
  EMAIL_ALREADY_EXISTS: "E-mail já está em uso"
  PHONE_ALREADY_EXISTS: "Telefone já está em uso"

  # Pedidos
  STORE_CLOSED: "Loja fechada"
  INGREDIENT_UNAVAILABLE: "Ingrediente indisponível"
  EMPTY_ORDER: "Pedido vazio"
  INVALID_DISCOUNT: "Desconto inválido"

  # Produtos
  INVALID_NAME: "Nome inválido ou obrigatório"
  INVALID_PRICE: "Preço inválido"
  PRODUCT_NAME_EXISTS: "Nome do produto já existe"
  PRODUCT_NOT_FOUND: "Produto não encontrado"

  # Sistema
  DATABASE_ERROR: "Erro interno do servidor"
  NO_VALID_FIELDS: "Nenhum campo válido para atualização"

servers:
  - url: http://127.0.0.1:5000/api
    description: Servidor de Desenvolvimento Local
  - url: https://api.royalburger.com/api
    description: Servidor de Produção

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Token JWT obtido através do endpoint /users/login"

  schemas:
    MessageResponse:
      type: object
      properties:
        msg:
          type: string
          example: "Operação realizada com sucesso."

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Mensagem de erro específica"

    DetailedErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Mensagem de erro específica"
        error_code:
          type: string
          example: "USER_NOT_FOUND"
          description: "Código interno do erro para facilitar tratamento programático"

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          example: "admin@royalburger.com"
        password:
          type: string
          example: "MinhaSenh@123"

    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."

    PasswordResetRequest:
      type: object
      required: [email]
      properties:
        email:
          type: string
          format: email
          example: "cliente@email.com"

    PasswordResetConfirm:
      type: object
      required: [token, new_password]
      properties:
        token:
          type: string
          example: "abc123def456"
        new_password:
          type: string
          example: "NovaSenh@123"

    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        full_name:
          type: string
          example: "João da Silva"
        email:
          type: string
          format: email
          example: "joao@email.com"
        phone:
          type: string
          example: "14999998888"
        cpf:
          type: string
          example: "12345678901"
        role:
          type: string
          enum: [customer, admin, manager, attendant]
          example: "customer"
        date_of_birth:
          type: string
          format: date
          example: "1990-01-15"
        is_active:
          type: boolean
          example: true

    NewUser:
      type: object
      required: [full_name, email, password, role]
      properties:
        full_name:
          type: string
          example: "Maria Oliveira"
        email:
          type: string
          format: email
          example: "maria@email.com"
        password:
          type: string
          example: "MinhaSenh@123"
        role:
          type: string
          enum: [admin, manager, attendant]
          example: "attendant"
        phone:
          type: string
          example: "14988887777"
        cpf:
          type: string
          example: "98765432100"
        date_of_birth:
          type: string
          format: date
          example: "1985-05-20"

    NewCustomer:
      type: object
      required:
        [full_name, email, password, password_confirmation, date_of_birth]
      properties:
        full_name:
          type: string
          example: "Carlos Santos"
        email:
          type: string
          format: email
          example: "carlos@email.com"
        password:
          type: string
          example: "MinhaSenh@123"
        password_confirmation:
          type: string
          example: "MinhaSenh@123"
        date_of_birth:
          type: string
          format: date
          example: "1992-03-10"
        phone:
          type: string
          example: "14977776666"
        cpf:
          type: string
          example: "11122233344"

    Address:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        city:
          type: string
          example: "São Paulo"
        neighborhood:
          type: string
          example: "Centro"
        street:
          type: string
          example: "Rua das Flores"
        number:
          type: string
          example: "123"
        complement:
          type: string
          example: "Apto 45"
        zip_code:
          type: string
          example: "01234-567"
        is_default:
          type: boolean
          example: true

    NewAddress:
      type: object
      required: [city, neighborhood, street, number]
      properties:
        city:
          type: string
          example: "São Paulo"
        neighborhood:
          type: string
          example: "Centro"
        street:
          type: string
          example: "Rua das Flores"
        number:
          type: string
          example: "123"
        complement:
          type: string
          example: "Apto 45"
        zip_code:
          type: string
          example: "01234-567"
        is_default:
          type: boolean
          example: false

    Product:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Hambúrguer Clássico"
        description:
          type: string
          example: "Hambúrguer com carne, alface, tomate e queijo"
        price:
          type: number
          format: float
          example: 25.90
        image_url:
          type: string
          example: "https://example.com/burger.jpg"
        is_available:
          type: boolean
          example: true
        section_id:
          type: integer
          example: 1
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00"

    NewProduct:
      type: object
      required: [name, price]
      properties:
        name:
          type: string
          example: "Hambúrguer Especial"
        description:
          type: string
          example: "Hambúrguer com ingredientes especiais"
        price:
          type: number
          format: float
          example: 35.90
        image_url:
          type: string
          example: "https://example.com/special-burger.jpg"
        section_id:
          type: integer
          example: 1

    Order:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        address_id:
          type: integer
          example: 1
        status:
          type: string
          enum:
            [
              pending,
              confirmed,
              preparing,
              ready,
              out_for_delivery,
              delivered,
              cancelled,
            ]
          example: "pending"
        total_amount:
          type: number
          format: float
          example: 51.80
        payment_method:
          type: string
          example: "credit_card"
        notes:
          type: string
          example: "Sem cebola"
        confirmation_code:
          type: string
          example: "ABC12345"
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T18:30:00"
        estimated_delivery:
          type: string
          format: date-time
          example: "2024-01-15T19:00:00"

    NewOrder:
      type: object
      required: [address_id, items, payment_method]
      properties:
        address_id:
          type: integer
          example: 1
        items:
          type: array
          items:
            type: object
            properties:
              product_id:
                type: integer
                example: 1
              quantity:
                type: integer
                example: 2
        payment_method:
          type: string
          enum: [credit_card, debit_card, money, pix]
          example: "credit_card"
        notes:
          type: string
          example: "Sem cebola"
        change_for_amount:
          type: number
          format: float
          example: 50.00
        cpf_on_invoice:
          type: string
          example: "12345678901"
        points_to_redeem:
          type: integer
          example: 100

paths:
  # Endpoints de Autenticação
  /users/login:
    post:
      tags: [Autenticação]
      summary: Fazer login
      description: Autentica um usuário e retorna um token JWT
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Login realizado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          description: Dados inválidos
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Senha incorreta
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Conta inativa
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /users/logout:
    post:
      tags: [Autenticação]
      summary: Fazer logout
      description: Invalida o token JWT do usuário logado
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Logout realizado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "401":
          description: Não autenticado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /users/request-password-reset:
    post:
      tags: [Autenticação]
      summary: Solicitar recuperação de senha
      description: Envia um e-mail com link para recuperação de senha
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordResetRequest"
      responses:
        "200":
          description: E-mail de recuperação enviado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "400":
          description: Dados inválidos
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /users/reset-password:
    post:
      tags: [Autenticação]
      summary: Redefinir senha
      description: Redefine a senha usando o token de recuperação
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordResetConfirm"
      responses:
        "200":
          description: Senha redefinida com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "400":
          description: Token inválido ou senha fraca
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Endpoints de Usuários
  /users/profile:
    get:
      tags: [Usuários]
      summary: Obter perfil do usuário logado
      description: Retorna os dados do usuário autenticado
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Perfil obtido com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Não autenticado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /users:
    get:
      tags: [Usuários]
      summary: Listar todos os funcionários
      description: Lista todos os funcionários (admin, manager, attendant)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Lista de funcionários
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          description: Não autenticado
        "403":
          description: Acesso negado
    post:
      tags: [Usuários]
      summary: Criar novo funcionário
      description: Cria um novo funcionário (apenas admin)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewUser"
      responses:
        "201":
          description: Funcionário criado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Dados inválidos (e-mail, telefone, senha fraca, etc.)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Não autenticado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Acesso negado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: E-mail ou telefone já em uso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /users/{user_id}:
    get:
      tags: [Usuários]
      summary: Obter funcionário por ID
      description: Busca um funcionário específico pelo ID
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
          description: ID do funcionário
      responses:
        "200":
          description: Funcionário encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: Funcionário não encontrado
    put:
      tags: [Usuários]
      summary: Atualizar funcionário
      description: Atualiza dados de um funcionário
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                full_name:
                  type: string
                email:
                  type: string
                  format: email
                phone:
                  type: string
                cpf:
                  type: string
                date_of_birth:
                  type: string
                  format: date
      responses:
        "200":
          description: Funcionário atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "400":
          description: Dados inválidos (e-mail, telefone, CPF, etc.)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Funcionário não encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: E-mail ou telefone já em uso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags: [Usuários]
      summary: Inativar funcionário
      description: Inativa um funcionário (soft delete)
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Funcionário inativado com sucesso
        "404":
          description: Funcionário não encontrado

  # Endpoints de Clientes
  /customers:
    get:
      tags: [Clientes]
      summary: Listar todos os clientes
      description: Lista todos os clientes cadastrados (admin/manager)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Lista de clientes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    post:
      tags: [Clientes]
      summary: Cadastrar novo cliente
      description: Cria uma nova conta de cliente
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewCustomer"
      responses:
        "201":
          description: Cliente cadastrado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Dados inválidos (e-mail, telefone, senha fraca, senhas não conferem, etc.)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: E-mail ou telefone já em uso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /customers/{user_id}:
    get:
      tags: [Clientes]
      summary: Obter cliente por ID
      description: Busca um cliente específico (próprio cliente ou admin)
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Cliente encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "403":
          description: Acesso negado
        "404":
          description: Cliente não encontrado
    put:
      tags: [Clientes]
      summary: Atualizar dados do cliente
      description: Atualiza dados do cliente (próprio cliente ou admin)
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                full_name:
                  type: string
                email:
                  type: string
                  format: email
                phone:
                  type: string
                cpf:
                  type: string
                date_of_birth:
                  type: string
                  format: date
      responses:
        "200":
          description: Cliente atualizado com sucesso
        "400":
          description: Dados inválidos
        "403":
          description: Acesso negado
        "404":
          description: Cliente não encontrado
    delete:
      tags: [Clientes]
      summary: Inativar conta do cliente
      description: Inativa a conta do cliente (próprio cliente ou admin)
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Conta inativada com sucesso
        "403":
          description: Acesso negado
        "404":
          description: Cliente não encontrado

  /customers/delete-account:
    delete:
      tags: [Clientes]
      summary: Deletar própria conta
      description: Cliente deleta sua própria conta permanentemente
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Conta deletada com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "403":
          description: Apenas clientes podem deletar suas próprias contas
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Falha ao deletar conta
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Endpoints de Endereços
  /customers/{user_id}/addresses:
    get:
      tags: [Endereços]
      summary: Listar endereços do cliente
      description: Lista todos os endereços de um cliente
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Lista de endereços
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Address"
        "403":
          description: Acesso negado
    post:
      tags: [Endereços]
      summary: Adicionar endereço
      description: Adiciona um novo endereço para o cliente
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewAddress"
      responses:
        "201":
          description: Endereço adicionado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Address"
        "400":
          description: Dados inválidos
        "403":
          description: Acesso negado

  /customers/addresses/{address_id}:
    put:
      tags: [Endereços]
      summary: Atualizar endereço
      description: Atualiza um endereço específico
      security:
        - bearerAuth: []
      parameters:
        - name: address_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewAddress"
      responses:
        "200":
          description: Endereço atualizado com sucesso
        "400":
          description: Dados inválidos
        "403":
          description: Acesso negado
        "404":
          description: Endereço não encontrado
    delete:
      tags: [Endereços]
      summary: Remover endereço
      description: Remove um endereço específico
      security:
        - bearerAuth: []
      parameters:
        - name: address_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Endereço removido com sucesso
        "403":
          description: Acesso negado
        "404":
          description: Endereço não encontrado

  # Endpoints de Produtos
  /products:
    get:
      tags: [Produtos]
      summary: Listar todos os produtos
      description: Lista todos os produtos disponíveis
      security: []
      responses:
        "200":
          description: Lista de produtos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
    post:
      tags: [Produtos]
      summary: Criar novo produto
      description: Cria um novo produto (admin/manager)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewProduct"
      responses:
        "201":
          description: Produto criado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          description: Dados inválidos (nome vazio, preço inválido)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Não autenticado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Acesso negado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Nome do produto já existe
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /products/{product_id}:
    get:
      tags: [Produtos]
      summary: Obter produto por ID
      description: Busca um produto específico pelo ID
      security: []
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Produto encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          description: Produto não encontrado
    put:
      tags: [Produtos]
      summary: Atualizar produto
      description: Atualiza um produto (admin/manager)
      security:
        - bearerAuth: []
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewProduct"
      responses:
        "200":
          description: Produto atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "400":
          description: Dados inválidos (nome vazio, preço inválido, nenhum campo válido)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Produto não encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Nome do produto já existe
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags: [Produtos]
      summary: Inativar produto
      description: Inativa um produto (admin/manager)
      security:
        - bearerAuth: []
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Produto inativado com sucesso
        "404":
          description: Produto não encontrado

  # Endpoints de Pedidos
  /orders:
    get:
      tags: [Pedidos]
      summary: Listar pedidos do cliente
      description: Lista todos os pedidos do cliente logado
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Lista de pedidos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
    post:
      tags: [Pedidos]
      summary: Criar novo pedido
      description: Cria um novo pedido (cliente)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewOrder"
      responses:
        "201":
          description: Pedido criado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Dados inválidos (CPF inválido, pedido vazio, método de pagamento ausente, desconto inválido)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Endereço inválido ou não pertence ao usuário
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Loja fechada
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "422":
          description: Ingrediente indisponível
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /orders/all:
    get:
      tags: [Pedidos]
      summary: Listar todos os pedidos
      description: Lista todos os pedidos do sistema (admin/manager)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Lista de todos os pedidos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"

  /orders/{order_id}:
    get:
      tags: [Pedidos]
      summary: Obter pedido por ID
      description: Busca um pedido específico
      security:
        - bearerAuth: []
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Pedido encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "404":
          description: Pedido não encontrado

  /orders/{order_id}/status:
    patch:
      tags: [Pedidos]
      summary: Atualizar status do pedido
      description: Atualiza o status de um pedido (admin/manager/attendant)
      security:
        - bearerAuth: []
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  enum:
                    [
                      pending,
                      confirmed,
                      preparing,
                      ready,
                      out_for_delivery,
                      delivered,
                      cancelled,
                    ]
                  example: "confirmed"
      responses:
        "200":
          description: Status atualizado com sucesso
        "400":
          description: Status inválido
        "404":
          description: Pedido não encontrado

  /orders/{order_id}/cancel:
    post:
      tags: [Pedidos]
      summary: Cancelar pedido
      description: Cancela um pedido (cliente)
      security:
        - bearerAuth: []
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Pedido cancelado com sucesso
        "403":
          description: Não é possível cancelar este pedido
        "404":
          description: Pedido não encontrado

  # Endpoint de Saúde
  /health:
    get:
      tags: [Sistema]
      summary: Verificar saúde da API
      description: Verifica se a API está funcionando
      security: []
      responses:
        "200":
          description: API funcionando
          content:
            text/plain:
              schema:
                type: string
                example: "API is running!"
  /customers/{user_id}/reactivate:
    post:
      summary: (Admin) Reativa a conta de um cliente.
      description: Reverte a inativação de uma conta de cliente, marcando-a como ativa novamente. Requer privilégios de administrador.
      tags: [Clientes]
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          description: O ID do cliente a ser reativado.
          schema:
            type: integer
      responses:
        "200":
          description: Conta reativada com sucesso.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "403":
          description: Acesso não autorizado.
        "404":
          description: Cliente não encontrado.
