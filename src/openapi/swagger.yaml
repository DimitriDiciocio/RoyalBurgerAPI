openapi: 3.0.0
info:
  title: Royal Burger API
  description: |
    API completa para o sistema de delivery da hamburgueria Royal Burger.

    ## Funcionalidades Principais
    - Sistema de autenticação JWT
    - Gestão de clientes e funcionários
    - Catálogo de produtos e ingredientes
    - Sistema de carrinho de compras persistente
    - Sistema de pedidos com rastreamento
    - Chat em tempo real
    - Sistema de notificações
    - Programa de fidelidade
    - Gestão de endereços

    ## Autenticação
    A API utiliza JWT (JSON Web Tokens) para autenticação. Inclua o token no header:
    ```
    Authorization: Bearer <seu_token>
    ```
  version: "2.2.0"
  contact:
    name: Royal Burger Development Team
    email: dev@royalburger.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

# Códigos de Erro Comuns (vendor extension)
x-error-codes:
  # Autenticação
  USER_NOT_FOUND: "Usuário não encontrado"
  ACCOUNT_INACTIVE: "Conta inativa"
  INVALID_PASSWORD: "Senha incorreta"

  # Validação de Dados
  INVALID_EMAIL: "Formato de e-mail inválido"
  INVALID_PHONE: "Formato de telefone inválido"
  INVALID_CPF: "CPF inválido"
  WEAK_PASSWORD: "Senha muito fraca"
  EMAIL_ALREADY_EXISTS: "E-mail já está em uso"

  # Pedidos
  STORE_CLOSED: "Loja fechada"
  INGREDIENT_UNAVAILABLE: "Ingrediente indisponível"
  EMPTY_ORDER: "Pedido vazio"
  INVALID_DISCOUNT: "Desconto inválido"

  # Produtos
  INVALID_NAME: "Nome inválido ou obrigatório"
  INVALID_PRICE: "Preço inválido"
  INVALID_COST_PRICE: "Preço de custo inválido"
  INVALID_PREP_TIME: "Tempo de preparo inválido"
  PRODUCT_NAME_EXISTS: "Nome do produto já existe"
  PRODUCT_NOT_FOUND: "Produto não encontrado"
  INVALID_CATEGORY: "Categoria inválida ou ausente"
  CATEGORY_NOT_FOUND: "Categoria não encontrada"
  CATEGORY_NAME_EXISTS: "Nome da categoria já existe"
  INGREDIENT_NAME_EXISTS: "Nome do ingrediente já existe"
  INVALID_UNIT: "Unidade do insumo inválida ou ausente"
  INVALID_COST: "Custo inválido"
  INGREDIENT_IN_USE: "Ingrediente vinculado a produtos"
  LINK_NOT_FOUND: "Vínculo entre produto e ingrediente não encontrado"

  # Sistema
  DATABASE_ERROR: "Erro interno do servidor"
  NO_VALID_FIELDS: "Nenhum campo válido para atualização"

servers:
  - url: http://127.0.0.1:5000/api
    description: Servidor de Desenvolvimento Local
  - url: https://api.royalburger.com/api
    description: Servidor de Produção

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Token JWT obtido através do endpoint /users/login"

  schemas:
    MessageResponse:
      type: object
      properties:
        msg:
          type: string
    CartResponse:
      type: object
      properties:
        cart:
          type: object
          properties:
            id:
              type: integer
            user_id:
              type: integer
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
        items:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              product_id:
                type: integer
              quantity:
                type: integer
              product:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  price:
                    type: number
                  description:
                    type: string
                  image_url:
                    type: string
              extras:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    ingredient_id:
                      type: integer
                    quantity:
                      type: integer
                    ingredient_name:
                      type: string
                    ingredient_price:
                      type: number
              extras_total:
                type: number
              item_subtotal:
                type: number
        summary:
          type: object
          properties:
            total_items:
              type: integer
            subtotal:
              type: number
            is_empty:
              type: boolean
          example: "Operação realizada com sucesso."

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Mensagem de erro específica"

    VerifyPassword:
      type: object
      required:
        - password
      properties:
        password:
          type: string
          example: "SenhaForte123"
          description: "A senha atual do usuário para verificação."

    DetailedErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Mensagem de erro específica"
        error_code:
          type: string
          example: "USER_NOT_FOUND"
          description: "Código interno do erro para facilitar tratamento programático"

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          example: "admin@royalburger.com"
        password:
          type: string
          example: "MinhaSenh@123"

    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."

    PasswordResetRequest:
      type: object
      required: [email]
      properties:
        email:
          type: string
          format: email
          example: "cliente@email.com"
          description: "Email do usuário para recuperação de senha"

    VerifyResetCodeRequest:
      type: object
      required: [email, reset_code]
      properties:
        email:
          type: string
          format: email
          example: "cliente@email.com"
          description: "Email do usuário"
        reset_code:
          type: string
          pattern: "^[0-9]{6}$"
          example: "123456"
          description: "Código de 6 dígitos enviado por email"

    PasswordResetConfirm:
      type: object
      required: [email, reset_code, new_password]
      properties:
        email:
          type: string
          format: email
          example: "cliente@email.com"
          description: "Email do usuário"
        reset_code:
          type: string
          pattern: "^[0-9]{6}$"
          example: "123456"
          description: "Código de 6 dígitos enviado por email"
        new_password:
          type: string
          example: "NovaSenh@123"
          description: "Nova senha do usuário"

    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        full_name:
          type: string
          example: "João da Silva"
        email:
          type: string
          format: email
          example: "joao@email.com"
        phone:
          type: string
          example: "14999998888"
        cpf:
          type: string
          example: "12345678901"
        role:
          type: string
          enum: [customer, admin, manager, attendant]
          example: "customer"
        date_of_birth:
          type: string
          format: date
          example: "1990-01-15"
        is_active:
          type: boolean
          example: true

    NewUser:
      type: object
      required: [full_name, email, password, role]
      properties:
        full_name:
          type: string
          example: "Maria Oliveira"
        email:
          type: string
          format: email
          example: "maria@email.com"
        password:
          type: string
          example: "MinhaSenh@123"
        role:
          type: string
          enum: [admin, manager, attendant]
          example: "attendant"
        phone:
          type: string
          example: "14988887777"
        cpf:
          type: string
          example: "98765432100"
        date_of_birth:
          type: string
          format: date
          example: "1985-05-20"

    NewCustomer:
      type: object
      required:
        [full_name, email, password, password_confirmation, date_of_birth]
      properties:
        full_name:
          type: string
          example: "Carlos Santos"
        email:
          type: string
          format: email
          example: "carlos@email.com"
        password:
          type: string
          example: "MinhaSenh@123"
        password_confirmation:
          type: string
          example: "MinhaSenh@123"
        date_of_birth:
          type: string
          format: date
          example: "1992-03-10"
        phone:
          type: string
          example: "14977776666"
        cpf:
          type: string
          example: "11122233344"

    Address:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        street:
          type: string
          example: "Rua das Flores"
        number:
          type: string
          example: "123"
        complement:
          type: string
          example: "Apto 45"
        neighborhood:
          type: string
          example: "Centro"
        city:
          type: string
          example: "São Paulo"
        state:
          type: string
          example: "SP"
        zip_code:
          type: string
          example: "01234-567"
        is_active:
          type: boolean
          example: true

    NewAddress:
      type: object
      required: [street, number, neighborhood, city, state]
      properties:
        street:
          type: string
          example: "Rua das Flores"
        number:
          type: string
          example: "123"
        complement:
          type: string
          example: "Apto 45"
        neighborhood:
          type: string
          example: "Centro"
        city:
          type: string
          example: "São Paulo"
        state:
          type: string
          example: "SP"
        zip_code:
          type: string
          example: "01234-567"

    Product:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Hambúrguer Clássico"
        description:
          type: string
          example: "Hambúrguer com carne, alface, tomate e queijo"
        price:
          type: number
          format: float
          example: 25.90
        cost_price:
          type: number
          format: float
          example: 15.50
        preparation_time_minutes:
          type: integer
          example: 12
        image_url:
          type: string
          example: "https://example.com/burger.jpg"
        is_available:
          type: boolean
          example: true
        section_id:
          type: integer
          example: 1
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00"
        category_id:
          type: integer
          example: 2

    NewProduct:
      type: object
      required: [name, price, category_id]
      properties:
        name:
          type: string
          example: "Hambúrguer Especial"
        description:
          type: string
          example: "Hambúrguer com ingredientes especiais"
        price:
          type: number
          format: float
          example: 35.90
        cost_price:
          type: number
          format: float
          example: 20.50
        preparation_time_minutes:
          type: integer
          example: 15
        image_url:
          type: string
          example: "https://example.com/special-burger.jpg"
        section_id:
          type: integer
          example: 1
        category_id:
          type: integer
          example: 2

    Category:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Bebidas"

    NewCategory:
      type: object
      required: [name]
      properties:
        name:
          type: string
          example: "Sanduíches"

    Ingredient:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Carne de Hambúrguer"
        price:
          type: number
          format: float
          example: 8.50
        additional_price:
          type: number
          format: float
          example: 2.00
        is_available:
          type: boolean
          example: true
        current_stock:
          type: number
          format: float
          example: 25.5
        stock_unit:
          type: string
          example: "kg"
        min_stock_threshold:
          type: number
          format: float
          example: 5.0

    NewIngredient:
      type: object
      required: [name, stock_unit]
      properties:
        name:
          type: string
          example: "Carne de Hambúrguer"
        price:
          type: number
          format: float
          example: 8.50
        additional_price:
          type: number
          format: float
          example: 2.00
        current_stock:
          type: number
          format: float
          example: 25.5
        stock_unit:
          type: string
          example: "kg"
        min_stock_threshold:
          type: number
          format: float
          example: 5.0

    Pagination:
      type: object
      properties:
        total:
          type: integer
          example: 120
        page:
          type: integer
          example: 1
        page_size:
          type: integer
          example: 10
        total_pages:
          type: integer
          example: 12

    ProductIngredientsResponse:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
            properties:
              ingredient_id:
                type: integer
              name:
                type: string
              quantity:
                type: number
                format: float
              unit:
                type: string
              price:
                type: number
                format: float
              is_available:
                type: boolean
              line_cost:
                type: number
                format: float
        estimated_cost:
          type: number
          format: float
          example: 7.80

    Order:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        address_id:
          type: integer
          example: 1
        status:
          type: string
          enum:
            [
              pending,
              confirmed,
              preparing,
              ready,
              out_for_delivery,
              delivered,
              cancelled,
            ]
          example: "pending"
        total_amount:
          type: number
          format: float
          example: 51.80
        payment_method:
          type: string
          example: "credit_card"
        notes:
          type: string
          example: "Sem cebola"
        confirmation_code:
          type: string
          example: "ABC12345"
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T18:30:00"
        estimated_delivery:
          type: string
          format: date-time
          example: "2024-01-15T19:00:00"

    NewOrder:
      type: object
      required: [address_id, payment_method]
      properties:
        address_id:
          type: integer
          example: 1
        use_cart:
          type: boolean
          default: false
          description: "Se true, cria pedido a partir do carrinho. Se false, usa items fornecidos."
          example: false
        items:
          description: "Obrigatório apenas quando use_cart é false"
          type: array
          items:
            type: object
            properties:
              product_id:
                type: integer
                example: 1
              quantity:
                type: integer
                example: 2
        payment_method:
          type: string
          enum: [credit_card, debit_card, money, pix]
          example: "credit_card"
        notes:
          type: string
          example: "Sem cebola"
        change_for_amount:
          type: number
          format: float
          example: 50.00
        cpf_on_invoice:
          type: string
          example: "12345678901"
        points_to_redeem:
          type: integer
          example: 100
          description: "Quantidade de pontos de fidelidade a resgatar (1 ponto = R$ 0,10 de desconto). Resgate automático durante a criação do pedido."
          minimum: 0

paths:
  # Endpoints de Autenticação
  /users/login:
    post:
      tags: [Autenticação]
      summary: Fazer login
      description: Autentica um usuário e retorna um token JWT
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Login realizado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          description: Dados inválidos
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Senha incorreta
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Conta inativa
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /users/logout:
    post:
      tags: [Autenticação]
      summary: Fazer logout
      description: Invalida o token JWT do usuário logado
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Logout realizado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "401":
          description: Não autenticado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /users/request-password-reset:
    post:
      tags: [Autenticação]
      summary: Solicitar recuperação de senha
      description: |
        Envia um e-mail com código de 6 dígitos para recuperação de senha.
        Verifica se o email existe no banco de dados antes de enviar.
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordResetRequest"
      responses:
        "200":
          description: E-mail de recuperação enviado (se o email existir)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "400":
          description: Dados inválidos
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Email não encontrado no banco de dados
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /users/verify-reset-code:
    post:
      tags: [Autenticação]
      summary: Verificar código de recuperação
      description: |
        Verifica se o código de 6 dígitos enviado por email é válido.
        Não altera a senha, apenas valida o código.
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyResetCodeRequest"
      responses:
        "200":
          description: Código válido
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "400":
          description: Código inválido, expirado ou já utilizado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /users/reset-password:
    post:
      tags: [Autenticação]
      summary: Redefinir senha
      description: |
        Redefine a senha usando o email e código de 6 dígitos.
        O código deve ter sido verificado anteriormente.
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordResetConfirm"
      responses:
        "200":
          description: Senha redefinida com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "400":
          description: Código inválido, expirado ou senha fraca
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Endpoints de Usuários
  /users/profile:
    get:
      tags: [Usuários]
      summary: Obter perfil do usuário logado
      description: Retorna os dados do usuário autenticado
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Perfil obtido com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Não autenticado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /users:
    get:
      tags: [Usuários]
      summary: Listar todos os funcionários
      description: Lista todos os funcionários (admin, manager, attendant)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Lista de funcionários
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          description: Não autenticado
        "403":
          description: Acesso negado
    post:
      tags: [Usuários]
      summary: Criar novo funcionário
      description: Cria um novo funcionário (apenas admin)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewUser"
      responses:
        "201":
          description: Funcionário criado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Dados inválidos (e-mail, telefone, senha fraca, etc.)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Não autenticado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Acesso negado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: E-mail ou telefone já em uso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /users/{user_id}:
    get:
      tags: [Usuários]
      summary: Obter funcionário por ID
      description: Busca um funcionário específico pelo ID
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
          description: ID do funcionário
      responses:
        "200":
          description: Funcionário encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: Funcionário não encontrado
    put:
      tags: [Usuários]
      summary: Atualizar funcionário
      description: Atualiza dados de um funcionário
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                full_name:
                  type: string
                email:
                  type: string
                  format: email
                phone:
                  type: string
                cpf:
                  type: string
                date_of_birth:
                  type: string
                  format: date
      responses:
        "200":
          description: Funcionário atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "400":
          description: Dados inválidos (e-mail, telefone, CPF, etc.)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Funcionário não encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: E-mail ou telefone já em uso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags: [Usuários]
      summary: Inativar funcionário
      description: Inativa um funcionário (soft delete)
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Funcionário inativado com sucesso
        "404":
          description: Funcionário não encontrado

  # Endpoints de Clientes
  /customers:
    get:
      tags: [Clientes]
      summary: Listar todos os clientes
      description: Lista todos os clientes cadastrados (admin/manager)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Lista de clientes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    post:
      tags: [Clientes]
      summary: Cadastrar novo cliente
      description: Cria uma nova conta de cliente
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewCustomer"
      responses:
        "201":
          description: Cliente cadastrado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Dados inválidos (e-mail, telefone, senha fraca, senhas não conferem, etc.)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: E-mail ou telefone já em uso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /customers/{user_id}:
    get:
      tags: [Clientes]
      summary: Obter cliente por ID
      description: Busca um cliente específico (próprio cliente ou admin)
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Cliente encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "403":
          description: Acesso negado
        "404":
          description: Cliente não encontrado
    put:
      tags: [Clientes]
      summary: Atualizar dados do cliente
      description: Atualiza dados do cliente (próprio cliente ou admin)
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                full_name:
                  type: string
                email:
                  type: string
                  format: email
                phone:
                  type: string
                cpf:
                  type: string
                date_of_birth:
                  type: string
                  format: date
      responses:
        "200":
          description: Cliente atualizado com sucesso
        "400":
          description: Dados inválidos
        "403":
          description: Acesso negado
        "404":
          description: Cliente não encontrado
    delete:
      tags: [Clientes]
      summary: Inativar conta do cliente
      description: Inativa a conta do cliente (próprio cliente ou admin)
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Conta inativada com sucesso
        "403":
          description: Acesso negado
        "404":
          description: Cliente não encontrado

  /customers/delete-account:
    delete:
      tags: [Clientes]
      summary: Deletar própria conta
      description: Cliente deleta sua própria conta permanentemente
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Conta deletada com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "403":
          description: Apenas clientes podem deletar suas próprias contas
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /customers/me/verify-password:
    post:
      summary: Verifica a senha do cliente autenticado.
      description: Permite que um usuário logado confirme sua senha atual antes de realizar uma ação sensível, como desativar a conta.
      tags: [Clientes]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyPassword"
      responses:
        "200":
          description: Senha verificada com sucesso.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "400":
          description: "Requisição inválida (ex: campo 'password' ausente)."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: "Senha incorreta."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Falha ao deletar conta
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Endpoints de Endereços
  /customers/{user_id}/addresses:
    get:
      tags: [Endereços]
      summary: Listar endereços do cliente
      description: Lista todos os endereços de um cliente
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Lista de endereços
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Address"
        "403":
          description: Acesso negado
    post:
      tags: [Endereços]
      summary: Adicionar endereço
      description: Adiciona um novo endereço para o cliente
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewAddress"
      responses:
        "201":
          description: Endereço adicionado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Address"
        "400":
          description: Dados inválidos
        "403":
          description: Acesso negado

  /customers/{user_id}/addresses/{address_id}:
    put:
      tags: [Endereços]
      summary: Atualizar endereço
      description: Atualiza um endereço específico do usuário (apenas endereços ativos)
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
        - name: address_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewAddress"
      responses:
        "200":
          description: Endereço atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "400":
          description: Dados inválidos
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Acesso negado
        "404":
          description: Endereço não encontrado
    delete:
      tags: [Endereços]
      summary: Inativar endereço
      description: Inativa um endereço específico do usuário (soft delete)
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
        - name: address_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Endereço removido com sucesso
        "403":
          description: Acesso negado
        "404":
          description: Endereço não encontrado

  # Endpoints de Produtos
  /products:
    get:
      tags: [Produtos]
      summary: Listar produtos (com filtros e paginação)
      description: Lista produtos com filtros por nome e categoria e suporte a paginação
      security: []
      parameters:
        - name: name
          in: query
          schema:
            type: string
          description: Filtro por nome (contains, case-insensitive)
        - name: category_id
          in: query
          schema:
            type: integer
          description: Filtrar por categoria
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: page_size
          in: query
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: Lista paginada de produtos
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Product"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
    post:
      tags: [Produtos]
      summary: Criar novo produto
      description: Cria um novo produto (admin/manager). Suporta upload de imagem via multipart/form-data
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewProduct"
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Hambúrguer Especial"
                description:
                  type: string
                  example: "Hambúrguer com ingredientes especiais"
                price:
                  type: number
                  format: float
                  example: 35.90
                cost_price:
                  type: number
                  format: float
                  example: 20.50
                preparation_time_minutes:
                  type: integer
                  example: 15
                category_id:
                  type: integer
                  example: 2
                image:
                  type: string
                  format: binary
                  description: Arquivo de imagem do produto (JPEG/PNG)
      responses:
        "201":
          description: Produto criado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          description: Dados inválidos (nome vazio, preço inválido, preço de custo inválido, tempo de preparo inválido, categoria inválida)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Não autenticado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Acesso negado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Nome do produto já existe
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /products/{product_id}:
    get:
      tags: [Produtos]
      summary: Obter produto por ID
      description: Busca um produto específico pelo ID
      security: []
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Produto encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          description: Produto não encontrado
    put:
      tags: [Produtos]
      summary: Atualizar produto
      description: Atualiza um produto (admin/manager). Suporta upload de nova imagem via multipart/form-data
      security:
        - bearerAuth: []
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewProduct"
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Hambúrguer Especial"
                description:
                  type: string
                  example: "Hambúrguer com ingredientes especiais"
                price:
                  type: number
                  format: float
                  example: 35.90
                cost_price:
                  type: number
                  format: float
                  example: 20.50
                preparation_time_minutes:
                  type: integer
                  example: 15
                category_id:
                  type: integer
                  example: 2
                image:
                  type: string
                  format: binary
                  description: Nova imagem do produto (JPEG/PNG)
      responses:
        "200":
          description: Produto atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "400":
          description: Dados inválidos (nome vazio, preço inválido, preço de custo inválido, tempo de preparo inválido, categoria inválida, nenhum campo válido)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Produto ou categoria não encontrados
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Nome do produto já existe
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags: [Produtos]
      summary: Inativar produto
      description: Inativa um produto (admin/manager)
      security:
        - bearerAuth: []
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Produto inativado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "404":
          description: Produto não encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /products/{product_id}/reactivate:
    post:
      tags: [Produtos]
      summary: Reativar produto
      description: Reativa um produto que foi inativado (admin/manager)
      security:
        - bearerAuth: []
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
          description: ID do produto a ser reativado
      responses:
        "200":
          description: Produto reativado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "401":
          description: Não autenticado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Acesso negado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Produto não encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Endpoints de Ingredientes
  /ingredients:
    get:
      tags: [Ingredientes]
      summary: Listar ingredientes (filtros e paginação)
      description: Lista ingredientes com filtros de nome e status, com paginação
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: query
          schema:
            type: string
          description: Filtro por nome (contains, case-insensitive)
        - name: status
          in: query
          schema:
            type: string
            enum: [low_stock, out_of_stock, in_stock]
          description: Filtro por status de estoque
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: page_size
          in: query
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: Lista paginada de ingredientes
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Ingredient"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
        "401":
          description: Não autenticado
        "403":
          description: Acesso negado

    post:
      tags: [Ingredientes]
      summary: Criar novo ingrediente
      description: Cria um novo ingrediente com validações de nome único, unidade e custo
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewIngredient"
      responses:
        "201":
          description: Ingrediente criado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ingredient"
        "400":
          description: Dados inválidos (nome, unidade, custo ou números negativos)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Não autenticado
        "403":
          description: Acesso negado
        "500":
          description: Erro interno do servidor

  /ingredients/{ingredient_id}:
    put:
      tags: [Ingredientes]
      summary: Atualizar ingrediente
      description: Atualiza dados de um ingrediente
      security:
        - bearerAuth: []
      parameters:
        - name: ingredient_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewIngredient"
      responses:
        "200":
          description: Ingrediente atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "400":
          description: Dados inválidos
        "404":
          description: Ingrediente não encontrado
        "409":
          description: Nome do ingrediente já existe
        "500":
          description: Erro interno do servidor

    delete:
      tags: [Ingredientes]
      summary: Excluir ingrediente
      description: Exclui um ingrediente, bloqueando quando houver vínculos com produtos
      security:
        - bearerAuth: []
      parameters:
        - name: ingredient_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Ingrediente excluído com sucesso
        "404":
          description: Ingrediente não encontrado
        "409":
          description: Ingrediente está vinculado a produtos
  /products/search:
    get:
      tags: [Produtos]
      summary: Buscar produtos (nome/categoria) com paginação
      description: Busca produtos por nome e/ou categoria, com paginação
      security: []
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: category_id
          in: query
          schema:
            type: integer
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: page_size
          in: query
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: Lista paginada de produtos
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Product"
                  pagination:
                    $ref: "#/components/schemas/Pagination"

  /products/{product_id}/ingredients:
    get:
      tags: [Produtos]
      summary: Listar insumos vinculados ao produto e custo estimado
      security: []
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Lista de insumos do produto e custo estimado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductIngredientsResponse"
    post:
      tags: [Produtos]
      summary: Adicionar/atualizar vínculo de insumo ao produto
      security:
        - bearerAuth: []
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ingredient_id, quantity]
              properties:
                ingredient_id:
                  type: integer
                quantity:
                  type: number
                  format: float
                unit:
                  type: string
      responses:
        "201":
          description: Vínculo criado/atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "400":
          description: Dados inválidos

  /products/{product_id}/ingredients/{ingredient_id}:
    put:
      tags: [Produtos]
      summary: Atualizar vínculo de insumo (quantidade/unidade)
      description: Atualiza a quantidade e/ou unidade de um ingrediente vinculado ao produto
      security:
        - bearerAuth: []
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
        - name: ingredient_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: number
                  format: float
                  example: 2.5
                unit:
                  type: string
                  example: "kg"
      responses:
        "200":
          description: Vínculo atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "400":
          description: Nenhum campo válido para atualização
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Vínculo não encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags: [Produtos]
      summary: Remover vínculo de insumo do produto
      description: Remove a associação entre um produto e um ingrediente
      security:
        - bearerAuth: []
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
        - name: ingredient_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Vínculo removido com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "404":
          description: Vínculo não encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /products/image/{product_id}:
    get:
      tags: [Produtos]
      summary: Obter imagem do produto
      description: Retorna a imagem do produto de forma segura, validando se o produto existe e possui imagem
      security: []
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
          description: ID do produto
      responses:
        "200":
          description: Imagem do produto
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
          headers:
            Cache-Control:
              description: Cache por 1 hora
              schema:
                type: string
                example: "public, max-age=3600"
        "400":
          description: Formato de imagem inválido
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Produto não encontrado, produto sem imagem ou arquivo não encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Erro interno ao carregar imagem
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /uploads/{filename}:
  get:
    tags: [Uploads]
    summary: Servir arquivo de upload
    description: Serve arquivos de upload de forma segura com validação de segurança
    security: []
    parameters:
      - name: filename
        in: path
        required: true
        schema:
          type: string
        description: "Caminho do arquivo (ex: products/1.jpeg)"
        example: "products/1.jpeg"
    responses:
      "200":
        description: Arquivo servido com sucesso
        content:
          image/jpeg:
            schema:
              type: string
              format: binary
          image/png:
            schema:
              type: string
              format: binary
          image/gif:
            schema:
              type: string
              format: binary
        headers:
          Cache-Control:
            description: Cache por 1 hora
            schema:
              type: string
              example: "public, max-age=3600"
          X-Content-Type-Options:
            description: Proteção contra MIME sniffing
            schema:
              type: string
              example: "nosniff"
          X-Frame-Options:
            description: Proteção contra clickjacking
            schema:
              type: string
              example: "DENY"
        "400":
          description: Nome de arquivo inválido ou formato não suportado
        "404":
          description: Arquivo não encontrado
        "500":
          description: Erro interno do servidor

  /categories:
    get:
      tags: [Categorias]
      summary: Listar categorias (filtro por nome e paginação)
      security: []
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: page_size
          in: query
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: Lista paginada de categorias
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Category"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
    post:
      tags: [Categorias]
      summary: Criar categoria
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewCategory"
      responses:
        "201":
          description: Categoria criada
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "400":
          description: Nome inválido
        "409":
          description: Nome já existe

  /categories/{category_id}:
    put:
      tags: [Categorias]
      summary: Atualizar categoria
      security:
        - bearerAuth: []
      parameters:
        - name: category_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewCategory"
      responses:
        "200":
          description: Categoria atualizada
        "400":
          description: Nome inválido
        "404":
          description: Categoria não encontrada
        "409":
          description: Nome já existe
    delete:
      tags: [Categorias]
      summary: Excluir categoria
      description: Bloqueia exclusão quando houver produtos vinculados
      security:
        - bearerAuth: []
      parameters:
        - name: category_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Categoria excluída
        "404":
          description: Categoria não encontrada
        "409":
          description: Existem produtos vinculados

  /ingredients/{ingredient_id}/availability:
    patch:
      tags: [Ingredientes]
      summary: Atualizar disponibilidade
      description: Atualiza o status de disponibilidade de um ingrediente
      security:
        - bearerAuth: []
      parameters:
        - name: ingredient_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [is_available]
              properties:
                is_available:
                  type: boolean
                  example: true
      responses:
        "200":
          description: Disponibilidade atualizada com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "400":
          description: Dados inválidos
        "404":
          description: Ingrediente não encontrado

  # Endpoints de Carrinho
  /cart/me:
    get:
      tags: [Carrinho]
      summary: Visualizar carrinho
      description: Retorna o estado completo do carrinho do usuário autenticado
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Carrinho obtido com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  cart:
                    type: object
                    properties:
                      id:
                        type: integer
                      user_id:
                        type: integer
                      created_at:
                        type: string
                        format: date-time
                      updated_at:
                        type: string
                        format: date-time
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        product_id:
                          type: integer
                        quantity:
                          type: integer
                        product:
                          type: object
                          properties:
                            id:
                              type: integer
                            name:
                              type: string
                            price:
                              type: number
                            description:
                              type: string
                            image_url:
                              type: string
                        extras:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: integer
                              ingredient_id:
                                type: integer
                              quantity:
                                type: integer
                              ingredient_name:
                                type: string
                              ingredient_price:
                                type: number
                        extras_total:
                          type: number
                        item_subtotal:
                          type: number
                  summary:
                    type: object
                    properties:
                      total_items:
                        type: integer
                      subtotal:
                        type: number
                      is_empty:
                        type: boolean
        "401":
          description: Não autenticado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /cart/me/items:
    post:
      tags: [Carrinho]
      summary: Adicionar item ao carrinho
      description: Adiciona um produto ao carrinho com opcionais extras
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [product_id]
              properties:
                product_id:
                  type: integer
                  example: 1
                quantity:
                  type: integer
                  default: 1
                  example: 2
                extras:
                  type: array
                  items:
                    type: object
                    required: [ingredient_id]
                    properties:
                      ingredient_id:
                        type: integer
                        example: 5
                      quantity:
                        type: integer
                        default: 1
                        example: 2
      responses:
        "201":
          description: Item adicionado ao carrinho com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  cart:
                    $ref: "#/components/schemas/CartResponse"
        "400":
          description: Dados inválidos
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Produto não encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Não autenticado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /cart/me/items/{cart_item_id}:
    put:
      tags: [Carrinho]
      summary: Atualizar item do carrinho
      description: Atualiza quantidade ou extras de um item específico
      security:
        - bearerAuth: []
      parameters:
        - name: cart_item_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  example: 3
                extras:
                  type: array
                  items:
                    type: object
                    required: [ingredient_id]
                    properties:
                      ingredient_id:
                        type: integer
                        example: 5
                      quantity:
                        type: integer
                        default: 1
                        example: 2
      responses:
        "200":
          description: Item atualizado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  cart:
                    $ref: "#/components/schemas/CartResponse"
        "400":
          description: Dados inválidos
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Item não encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Não autenticado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags: [Carrinho]
      summary: Remover item do carrinho
      description: Remove um item específico do carrinho
      security:
        - bearerAuth: []
      parameters:
        - name: cart_item_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Item removido com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  cart:
                    $ref: "#/components/schemas/CartResponse"
        "404":
          description: Item não encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Não autenticado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /cart/me/clear:
    delete:
      tags: [Carrinho]
      summary: Limpar carrinho
      description: Remove todos os itens do carrinho do usuário
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Carrinho limpo com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "401":
          description: Não autenticado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /cart/me/summary:
    get:
      tags: [Carrinho]
      summary: Resumo do carrinho
      description: Retorna apenas o resumo do carrinho (sem detalhes dos itens)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Resumo obtido com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  summary:
                    type: object
                    properties:
                      total_items:
                        type: integer
                      subtotal:
                        type: number
                      is_empty:
                        type: boolean
                  cart_id:
                    type: integer
        "401":
          description: Não autenticado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Endpoints de Pedidos
  /orders:
    get:
      tags: [Pedidos]
      summary: Listar pedidos do cliente
      description: Lista todos os pedidos do cliente logado
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Lista de pedidos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
    post:
      tags: [Pedidos]
      summary: Criar novo pedido
      description: |
        Cria um novo pedido (cliente).
        
        **Funcionalidades automáticas:**
        - **Resgate de pontos**: Se `points_to_redeem` for fornecido, os pontos são resgatados automaticamente (1 ponto = R$ 0,10 de desconto)
        - **Ganho de pontos**: Após o pedido ser concluído, o usuário ganha pontos automaticamente
        - **Validações**: Horário da loja, disponibilidade de ingredientes, CPF, etc.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewOrder"
      responses:
        "201":
          description: Pedido criado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Dados inválidos (CPF inválido, pedido vazio, método de pagamento ausente, desconto inválido)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Endereço inválido ou não pertence ao usuário
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Loja fechada
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "422":
          description: Ingrediente indisponível
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /orders/all:
    get:
      tags: [Pedidos]
      summary: Listar todos os pedidos
      description: Lista todos os pedidos do sistema (admin/manager)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Lista de todos os pedidos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"

  /orders/{order_id}:
    get:
      tags: [Pedidos]
      summary: Obter pedido por ID
      description: Busca um pedido específico
      security:
        - bearerAuth: []
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Pedido encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "404":
          description: Pedido não encontrado

  /orders/{order_id}/status:
    patch:
      tags: [Pedidos]
      summary: Atualizar status do pedido
      description: Atualiza o status de um pedido (admin/manager/attendant)
      security:
        - bearerAuth: []
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  enum:
                    [
                      pending,
                      confirmed,
                      preparing,
                      ready,
                      out_for_delivery,
                      delivered,
                      cancelled,
                    ]
                  example: "confirmed"
      responses:
        "200":
          description: Status atualizado com sucesso
        "400":
          description: Status inválido
        "404":
          description: Pedido não encontrado

  /orders/{order_id}/cancel:
    post:
      tags: [Pedidos]
      summary: Cancelar pedido
      description: Cancela um pedido (cliente)
      security:
        - bearerAuth: []
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Pedido cancelado com sucesso
        "403":
          description: Não é possível cancelar este pedido
        "404":
          description: Pedido não encontrado

  # Endpoint de Saúde
  /health:
    get:
      tags: [Sistema]
      summary: Verificar saúde da API
      description: Verifica se a API está funcionando
      security: []
      responses:
        "200":
          description: API funcionando
          content:
            text/plain:
              schema:
                type: string
                example: "API is running!"

  /customers/{user_id}/reactivate:
    post:
      summary: (Admin) Reativa a conta de um cliente.
      description: Reverte a inativação de uma conta de cliente, marcando-a como ativa novamente. Requer privilégios de administrador.
      tags: [Clientes]
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          description: O ID do cliente a ser reativado.
          schema:
            type: integer
      responses:
        "200":
          description: Conta reativada com sucesso.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "403":
          description: Acesso não autorizado.
        "404":
          description: Cliente não encontrado.

  # Novos endpoints para o painel administrativo

  # Dashboard
  /dashboard/metrics:
    get:
      tags: [Dashboard]
      summary: Métricas do dashboard
      description: Retorna as principais métricas de performance do restaurante em tempo real
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Métricas obtidas com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_orders_today:
                    type: integer
                    example: 45
                  revenue_today:
                    type: number
                    format: float
                    example: 1250.50
                  average_ticket:
                    type: number
                    format: float
                    example: 27.79
                  average_preparation_time:
                    type: number
                    format: float
                    example: 15.5
                  completed_orders:
                    type: integer
                    example: 38
                  ongoing_orders:
                    type: integer
                    example: 7
                  low_stock_items_count:
                    type: integer
                    example: 3
                  cancelled_orders:
                    type: integer
                    example: 2
                  order_distribution:
                    type: object
                    example: { "delivery": 30, "on_site": 10, "takeaway": 5 }
                  recent_orders:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        total_amount:
                          type: number
                        status:
                          type: string
                        order_type:
                          type: string
                        created_at:
                          type: string

  # Estoque
  /stock/summary:
    get:
      tags: [Estoque]
      summary: Resumo do estoque
      description: Retorna os KPIs de estoque
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Resumo obtido com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_stock_value:
                    type: number
                    format: float
                    example: 2500.75
                  out_of_stock_count:
                    type: integer
                    example: 2
                  low_stock_count:
                    type: integer
                    example: 5
                  in_stock_count:
                    type: integer
                    example: 18

  /ingredients/{ingredient_id}/stock:
    post:
      tags: [Estoque]
      summary: Ajustar estoque de ingrediente
      description: Adiciona ou subtrai quantidade do estoque de um ingrediente
      security:
        - bearerAuth: []
      parameters:
        - name: ingredient_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [change]
              properties:
                change:
                  type: number
                  format: float
                  example: 1.5
                  description: Quantidade a ser adicionada (positiva) ou subtraída (negativa)
      responses:
        "200":
          description: Estoque ajustado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "400":
          description: Quantidade inválida ou estoque negativo
        "404":
          description: Ingrediente não encontrado

  /stock/purchase-order:
    post:
      tags: [Estoque]
      summary: Gerar pedido de compra
      description: Gera uma lista de ingredientes que precisam ser comprados
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Pedido gerado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        ingredient_id:
                          type: integer
                        name:
                          type: string
                        current_stock:
                          type: number
                        min_threshold:
                          type: number
                        suggested_quantity:
                          type: number
                        estimated_cost:
                          type: number
                  total_items:
                    type: integer
                  total_estimated_cost:
                    type: number

  # Cardápio
  /menu/summary:
    get:
      tags: [Cardápio]
      summary: Resumo do cardápio
      description: Retorna os KPIs do cardápio
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Resumo obtido com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_items:
                    type: integer
                    example: 25
                  average_price:
                    type: number
                    format: float
                    example: 28.90
                  average_margin:
                    type: number
                    format: float
                    example: 15.50
                  average_preparation_time:
                    type: number
                    format: float
                    example: 12.5

  # Relatórios
  /reports:
    get:
      tags: [Relatórios]
      summary: Gerar relatórios
      description: Gera relatórios e analytics baseados no tipo e período
      security:
        - bearerAuth: []
      parameters:
        - name: type
          in: query
          required: true
          schema:
            type: string
            enum: [sales, financial, performance, employees]
          description: Tipo de relatório
        - name: period
          in: query
          required: true
          schema:
            type: string
            enum: [last_7_days, last_30_days, this_month]
          description: Período do relatório
      responses:
        "200":
          description: Relatório gerado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                  period:
                    type: object
                    properties:
                      start_date:
                        type: string
                      end_date:
                        type: string
                  # Dados específicos variam conforme o tipo de relatório

  # Financeiro
  /financials/summary:
    get:
      tags: [Financeiro]
      summary: Resumo financeiro
      description: Retorna os KPIs financeiros
      security:
        - bearerAuth: []
      parameters:
        - name: period
          in: query
          schema:
            type: string
            enum: [this_month]
          description: Período do resumo
      responses:
        "200":
          description: Resumo obtido com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  current_balance:
                    type: number
                    format: float
                    example: 12500.75
                  total_revenue:
                    type: number
                    format: float
                    example: 25000.00
                  total_expense:
                    type: number
                    format: float
                    example: 12500.25
                  profit_loss:
                    type: number
                    format: float
                    example: 12499.75
                  period:
                    type: string

  /financials/transactions:
    get:
      tags: [Financeiro]
      summary: Listar transações financeiras
      description: Lista todas as transações com filtros opcionais
      security:
        - bearerAuth: []
      parameters:
        - name: start_date
          in: query
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          schema:
            type: string
            format: date
        - name: type
          in: query
          schema:
            type: string
            enum: [revenue, expense]
      responses:
        "200":
          description: Lista de transações
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    description:
                      type: string
                    amount:
                      type: number
                    type:
                      type: string
                    transaction_date:
                      type: string
                    payment_method:
                      type: string
                    notes:
                      type: string
                    created_by_name:
                      type: string

    post:
      tags: [Financeiro]
      summary: Criar transação financeira
      description: Adiciona uma nova transação financeira
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [description, amount, type]
              properties:
                description:
                  type: string
                  example: "Venda de produtos"
                amount:
                  type: number
                  format: float
                  example: 1250.50
                type:
                  type: string
                  enum: [revenue, expense]
                  example: "revenue"
                payment_method:
                  type: string
                  example: "credit_card"
                notes:
                  type: string
                  example: "Pagamento via PIX"
      responses:
        "201":
          description: Transação criada com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  description:
                    type: string
                  amount:
                    type: number
                  type:
                    type: string
                  transaction_date:
                    type: string
                  payment_method:
                    type: string
                  notes:
                    type: string

  # Métricas de usuários
  /users/{user_id}/metrics:
    get:
      tags: [Usuários]
      summary: Métricas de funcionário
      description: Retorna as métricas de performance de um funcionário específico
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Métricas obtidas com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: integer
                  role:
                    type: string
                  total_completed_orders:
                    type: integer
                    example: 45
                  total_revenue:
                    type: number
                    format: float
                    example: 2250.75
                  average_service_time_minutes:
                    type: number
                    format: float
                    example: 12.5
                  ongoing_orders:
                    type: integer
                    example: 3
                  average_rating:
                    type: number
                    format: float
                    example: 4.8
        "404":
          description: Usuário não encontrado ou não é funcionário

  # Configurações
  /settings:
    get:
      tags: [Configurações]
      summary: Listar configurações
      description: Lista todas as configurações globais do sistema
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Lista de configurações
          content:
            application/json:
              schema:
                type: object
                properties:
                  settings:
                    type: array
                    items:
                      type: object
                      properties:
                        key:
                          type: string
                        value:
                          type: string
                        description:
                          type: string
                        updated_at:
                          type: string
                        updated_by:
                          type: integer

    put:
      tags: [Configurações]
      summary: Atualizar configurações
      description: Atualiza múltiplas configurações do sistema
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [settings]
              properties:
                settings:
                  type: array
                  items:
                    type: object
                    required: [key, value]
                    properties:
                      key:
                        type: string
                        example: "delivery_fee"
                      value:
                        type: string
                        example: "7.50"
      responses:
        "200":
          description: Configurações atualizadas com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                  updated_settings:
                    type: array
                    items:
                      type: object
                      properties:
                        key:
                          type: string
                        value:
                          type: string

  # Endpoints de Sistema de Fidelidade
  /loyalty/balance/{user_id}:
    get:
      tags: [Fidelidade]
      summary: Consultar saldo de pontos
      description: |
        Retorna o saldo detalhado de pontos do usuário com informações de expiração.
        
        **Informações retornadas:**
        - Saldo atual de pontos
        - Pontos acumulados totais
        - Pontos gastos totais
        - Data de expiração dos pontos
        - Status de expiração
        
        **Permissões:**
        - Usuário pode consultar seu próprio saldo
        - Admin/Manager podem consultar qualquer saldo
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          description: ID do usuário
          example: 1
      responses:
        "200":
          description: Saldo obtido com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoyaltyBalance"
        "401":
          description: Não autenticado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Acesso negado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /loyalty/history/{user_id}:
    get:
      tags: [Fidelidade]
      summary: Consultar histórico de pontos
      description: |
        Retorna o histórico completo de transações de pontos do usuário.
        
        **Informações retornadas:**
        - Lista de todas as transações (ganhos e gastos)
        - Data e hora de cada transação
        - Motivo da transação
        - Quantidade de pontos
        - Tipo de transação (earned/spent/neutral)
        - ID do pedido relacionado (se aplicável)
        
        **Permissões:**
        - Usuário pode consultar seu próprio histórico
        - Admin/Manager podem consultar qualquer histórico
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          description: ID do usuário
          example: 1
      responses:
        "200":
          description: Histórico obtido com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LoyaltyHistoryItem"
        "401":
          description: Não autenticado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Acesso negado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /loyalty/add-points:
    post:
      tags: [Fidelidade]
      summary: Adicionar pontos (Admin/Manager)
      description: |
        Adiciona pontos manualmente a um usuário (apenas admin/manager).
        
        **Campos obrigatórios:**
        - `user_id`: ID do usuário que receberá os pontos
        - `points`: Quantidade de pontos a adicionar (deve ser positivo)
        - `reason`: Motivo da adição de pontos
        
        **Campos opcionais:**
        - `order_id`: ID do pedido relacionado (se aplicável)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddPointsRequest"
            examples:
              bonus_promocional:
                summary: Bônus promocional
                value:
                  user_id: 1
                  points: 100
                  reason: "Bônus promocional de boas-vindas"
              compensacao_pedido:
                summary: Compensação por pedido
                value:
                  user_id: 5
                  points: 50
                  reason: "Compensação por atraso no pedido"
                  order_id: 123
      responses:
        "200":
          description: Pontos adicionados com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "400":
          description: Dados inválidos
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Não autenticado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Acesso negado (apenas admin/manager)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /loyalty/spend-points:
    post:
      tags: [Fidelidade]
      summary: Gastar pontos (Admin/Manager)
      description: |
        Gasta pontos manualmente de um usuário (apenas admin/manager).
        
        **Campos obrigatórios:**
        - `user_id`: ID do usuário que terá os pontos gastos
        - `points`: Quantidade de pontos a gastar (deve ser positivo)
        - `reason`: Motivo do gasto de pontos
        
        **Campos opcionais:**
        - `order_id`: ID do pedido relacionado (se aplicável)
        
        **Validações:**
        - Verifica se o usuário tem saldo suficiente
        - Pontos devem ser positivos
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SpendPointsRequest"
            examples:
              penalidade_atraso:
                summary: Penalidade por atraso
                value:
                  user_id: 1
                  points: 50
                  reason: "Penalidade por atraso no pagamento"
              correcao_erro:
                summary: Correção de erro
                value:
                  user_id: 3
                  points: 25
                  reason: "Correção de pontos adicionados por engano"
                  order_id: 456
      responses:
        "200":
          description: Pontos gastos com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "400":
          description: Dados inválidos ou saldo insuficiente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Não autenticado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Acesso negado (apenas admin/manager)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /loyalty/expire-accounts:
    post:
      tags: [Fidelidade]
      summary: Executar expiração de pontos
      description: |
        Executa o processo de expiração automática de pontos (apenas admin/manager).
        
        **Funcionalidade:**
        - Expira pontos de contas inativas
        - Remove pontos que passaram da data de expiração
        - Registra a expiração no histórico
        - Retorna o número de contas afetadas
        
        **Quando usar:**
        - Execução manual do processo de expiração
        - Pode ser chamado por cron jobs
        - Útil para manutenção do sistema
        
        **Permissões:**
        - Apenas admin/manager
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Processo de expiração executado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Processo de expiração executado. 5 contas expiradas."
                  expired_accounts:
                    type: integer
                    example: 5
                    description: "Número de contas que tiveram pontos expirados"
        "401":
          description: Não autenticado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Acesso negado (apenas admin/manager)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /loyalty/stats:
    get:
      tags: [Fidelidade]
      summary: Estatísticas do sistema de fidelidade
      description: |
        Retorna estatísticas gerais do sistema de fidelidade (apenas admin/manager).
        
        **Informações retornadas:**
        - Total de usuários com pontos
        - Total de pontos em circulação
        - Total de pontos expirados
        - Média de pontos por usuário
        
        **Uso:**
        - Dashboard administrativo
        - Relatórios de fidelidade
        - Análise de engajamento
        
        **Permissões:**
        - Apenas admin/manager
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Estatísticas obtidas com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoyaltyStats"
        "401":
          description: Não autenticado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Acesso negado (apenas admin/manager)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    # Schemas para Sistema de Fidelidade
    LoyaltyBalance:
      type: object
      properties:
        accumulated_points:
          type: integer
          example: 1000
          description: "Total de pontos acumulados"
        spent_points:
          type: integer
          example: 200
          description: "Total de pontos gastos"
        current_balance:
          type: integer
          example: 800
          description: "Saldo atual de pontos"
        expiration_date:
          type: string
          format: date
          example: "2024-03-15"
          description: "Data de expiração dos pontos"
        points_expired:
          type: boolean
          example: false
          description: "Se os pontos já expiraram"
        expired_points:
          type: integer
          example: 0
          description: "Quantidade de pontos expirados"

    LoyaltyHistoryItem:
      type: object
      properties:
        points:
          type: integer
          example: 50
          description: "Quantidade de pontos (positivo para ganho, negativo para gasto)"
        reason:
          type: string
          example: "Pontos ganhos no pedido #123"
          description: "Motivo da transação"
        date:
          type: string
          format: date-time
          example: "2024-01-15T14:30:00"
          description: "Data e hora da transação"
        order_id:
          type: integer
          example: 123
          description: "ID do pedido relacionado (se aplicável)"
        transaction_type:
          type: string
          enum: [earned, spent, neutral]
          example: "earned"
          description: "Tipo da transação"
        expiration_date:
          type: string
          format: date
          example: "2024-03-15"
          description: "Data de expiração dos pontos (se aplicável)"

    LoyaltyStats:
      type: object
      properties:
        total_users_with_points:
          type: integer
          example: 150
          description: "Total de usuários com pontos"
        total_points_in_circulation:
          type: integer
          example: 25000
          description: "Total de pontos em circulação"
        total_points_expired:
          type: integer
          example: 5000
          description: "Total de pontos expirados"
        average_points_per_user:
          type: number
          format: float
          example: 166.67
          description: "Média de pontos por usuário"

    AddPointsRequest:
      type: object
      required: [user_id, points, reason]
      properties:
        user_id:
          type: integer
          example: 1
          description: "ID do usuário que receberá os pontos"
          minimum: 1
        points:
          type: integer
          example: 100
          description: "Quantidade de pontos a adicionar (deve ser positivo)"
          minimum: 1
        reason:
          type: string
          example: "Bônus promocional"
          description: "Motivo da adição de pontos"
          minLength: 1
        order_id:
          type: integer
          example: 123
          description: "ID do pedido relacionado (opcional)"
          minimum: 1

    SpendPointsRequest:
      type: object
      required: [user_id, points, reason]
      properties:
        user_id:
          type: integer
          example: 1
          description: "ID do usuário que terá os pontos gastos"
          minimum: 1
        points:
          type: integer
          example: 50
          description: "Quantidade de pontos a gastar (deve ser positivo)"
          minimum: 1
        reason:
          type: string
          example: "Penalidade por atraso no pagamento"
          description: "Motivo do gasto de pontos"
          minLength: 1
        order_id:
          type: integer
          example: 123
          description: "ID do pedido relacionado (opcional)"
          minimum: 1

